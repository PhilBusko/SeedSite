{"version":3,"sources":["app-main/service-worker.js","app-main/axios-wrapper.js","layouts/nav-menu.js","layouts/content-block.js","layouts/menu-layout.js","elements/common/button-wrapper.js","elements/common/plot-wrapper.js","elements/common/progress-bar.js","elements/common/table-wrapper.js","elements/common/websocket.js","elements/form/form-table.js","elements/form/label-wrapper.js","elements/form/number-wrapper.js","elements/form/select-wrapper.js","elements/form/text-wrapper.js","page-routes/base-axios.js","app-main/routes.js","page-routes/base-websocket.js","app-main/app-root.js","app-main/index.js","assets/loading_cat.gif"],"names":["Boolean","window","location","hostname","match","console","log","process","host","includes","axiosInstance","axios","create","baseURL","headers","NavMenu","menuRoutes","RoutesConfig","filter","cfg","order","className","map","menu","idx","key","exact","to","path","title","style","React","Component","ContentBlock","this","props","children","MenuLayout","ButtonWrapper","handleClick","synthEvt","updateClick","ctrlId","label","toLowerCase","replace","disabled","id","onClick","defaultProps","PlotlyComponent","createPlotlyComponent","Plotly","PlotWrapper","loadingIcon","require","sizeStyles","Object","keys","plotConfig","length","data","layout","config","isStatic","isLoading","src","alt","ProgressBar","width","percentage","TableWrapper","getTitleWords","original","format","l","toUpperCase","isFloat","input","formatted","toString","test","Number","isNaN","getColumnWidth","dataRows","propName","maxLength","forEach","row","getColumnsDef","tableRows","dataProps","getOwnPropertyNames","columnsDef","prop","numberClass","newCol","Header","headerClassName","accessor","push","pageSize","pagination","columns","showPagination","sortable","resizable","showPageSizeOptions","Websocket","initializeWs","caller","channel","socketUrl","websocket","WebSocket","onopen","newState","readyState","setState","initialCalls","onmessage","message","wsMessage","JSON","parse","responseRouter","onclose","FormTable","childrenElems","Array","isArray","extraClasses","minWidth","child","LabelWrapper","htmlFor","value","NumberWrapper","updateValue","newValue","target","updateText","type","min","onChange","SelectWrapper","updateSelection","options","opt","TextWrapper","sizeClass","size","BaseAxios","state","selectOptions","handleSelect","payload","parseInt","p","handleText","handleNumber","get","then","success","legoSets","catch","error","labelVal","selectKey","inputVal","numberVal","tabular","item","set_no","name","component","PR","send","stringify","functionType","handleButton","CM","close","connection","progress","status","setPlot","setTable","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","setGlobal","envHost","module","exports"],"mappings":"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","file":"static/js/main.8d8ee03f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**************************************************************************************************\nAXIOS WRAPPER\n- axios is bugged and doesnt use the baseURL, like the online help says\n- next best solution is to create your own instance, for which the baseURL does work\n**************************************************************************************************/\nimport axios from 'axios';\n\nconsole.log(\"axios\");\nconsole.log(process.env.NODE_ENV);\nconsole.log(window.location.hostname);\n\nlet host = 'http://localhost:8000';\nif (window.location.host.includes('localhost') == false) \n  host = `http://${window.location.host}:80`;\n  //host = `https://${window.location.host}:443`;\n\nconst axiosInstance = axios.create({\n  baseURL: host,\n  headers: {'Content-Type': 'application/json'},\n});\n\nexport default axiosInstance;\n","/**************************************************************************************************\nNAV MENU\n**************************************************************************************************/\nimport React from 'react';\nimport { NavLink } from 'react-router-dom'\nimport { RoutesConfig } from '../app-main/routes'\nimport './styles.scss'\n\nclass NavMenu extends React.Component {\n\n    render() {\n\n        let menuRoutes = RoutesConfig.filter( cfg => cfg.order > 0 );\n\n        return (\n            <div className='navigation-wrapper'>\n                <div className='nav-panel'>\n                    <div className='link-panel'>\n                        {\n                            menuRoutes.map( (menu, idx) => \n                                <div className='link-container' key={ menu.order }>\n                                    <NavLink exact to={ menu.path }>{ menu.title }</NavLink>\n                                </div> )\n                        }\n                    </div>\n                    <div className='logo-container link-panel'>\n                        <div className='link-container' style={{ 'display': 'none' }}>\n                            <NavLink exact to={ '/base-page' }>Template</NavLink>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NavMenu;\n","/**************************************************************************************************\nCONTENT BLOCK COMPONENT\n**************************************************************************************************/\nimport React from 'react';\nimport './styles.scss'\n\nclass ContentBlock extends React.Component {\n   render() {\n      return (\n         <div className='content-wrapper'>\n\n            { this.props.children }\n\n         </div>\n      );\n   }\n}\n\nexport default ContentBlock;\n","/**************************************************************************************************\nMENU LAYOUT\n**************************************************************************************************/\nimport * as React from 'react';\nimport NavMenu from './nav-menu'\nimport ContentBlock from './content-block';\nimport './styles.scss'\n\nclass MenuLayout extends React.Component {\n\n    //navigationBkgd = require('../assets/images/navigation.png')\n    //contentBkgd = require('../assets/images/content.png')\n\n    render() {\n\n        return (\n            <div className='pure-g menu-layout'>\n\n                <div className='pure-u-4-24 pure-u-xl-3-24  nav-column'>\n                    <div className='fixed-panel'>\n                        <NavMenu></NavMenu>\n                    </div>\n                </div>\n\n                <div className='pure-u-20-24 pure-u-xl-21-24  content-column'>\n                    <ContentBlock>\n                        { this.props.children }\n                    </ContentBlock>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default MenuLayout;\n\n","/**************************************************************************************************\nBUTTON WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './common.scss'\n\n\nclass ButtonWrapper extends React.Component {\n\n    static propTypes = {\n        label: PropTypes.string.isRequired,  \n        updateClick: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n    };\n    static defaultProps = {\n        disabled: false,\n    };\n\n    handleClick = (synthEvt) => {\n        this.props.updateClick();\n    }\n\n    render() {\n        let ctrlId = this.props.label.toLowerCase().replace(' ', '') + '_btn'\n        return (\n            <div className='button-wrapper'>\n                <div className={ this.props.disabled ? 'disable-overlay' : ''}></div>\n                <button \n                    className='button-format' id={ ctrlId }\n                    onClick={ this.handleClick } >\n                    { this.props.label }\n                </button>\n            </div>\n        );\n    }\n    // render() {\n    //     let ctrlId = this.props.label.toLowerCase().replace(' ', '') + '_btn'\n    //     return (\n    //         <>\n    //             <td colSpan='2' className='button-col'>\n    //                 <button id={ ctrlId } onClick={ this.handleClick } className='button-format'>{ this.props.label }</button>\n    //             </td>\n    //         </>\n    //     );\n    // }\n}\n\nexport default ButtonWrapper;\n","/**************************************************************************************************\nPLOT WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './common.scss';\n\nimport createPlotlyComponent from 'react-plotlyjs';\n//plotly bundles https://github.com/plotly/plotly.js/blob/master/dist/README.md#partial-bundles ??\nimport Plotly from 'plotly.js/dist/plotly-cartesian';\nconst PlotlyComponent = createPlotlyComponent(Plotly);\n\n\nclass PlotWrapper extends React.Component {\n\n    static propTypes = {\n        plotConfig: PropTypes.object.isRequired,\n        sizeStyles: PropTypes.object, \n        isLoading: PropTypes.bool,\n        isStatic: PropTypes.bool,  \n    }\n    static defaultProps = {\n        sizeStyles: {'width': '500px', 'height': '300px'},\n        isLoading: false,\n        isStatic: false,\n    }\n\n    loadingIcon = require('../../assets/loading_cat.gif')\n\n    render() {\n        return (\n            <div className='plot-wrapper' style={ this.props.sizeStyles }>\n                {(() => {\n                    if (Object.keys(this.props.plotConfig).length > 0) { return (\n                        <PlotlyComponent \n                            data={ this.props.plotConfig.data }\n                            layout={ this.props.plotConfig.layout }\n                            config={{ 'staticPlot': this.props.isStatic }}\n                        />  \n                    )} \n                    else if (this.props.isLoading == true) { return (\n                        <div className='empty-plot even-panel'>\n                            <img src={ this.loadingIcon } className='loading-icon' alt='loading'/>\n                        </div>\n                    )} \n                    else { return (\n                        <div className='empty-plot even-panel'>\n                            No Data\n                        </div>\n                    )}\n                })()}\n            </div>\n        );\n    }\n}\n\nexport default PlotWrapper;\n","/**************************************************************************************************\nBUTTON WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './common.scss'\n\n\nconst ProgressBar = (props) => {\n    return (\n        <div className='progress-bar'>\n            <div className='filler' style={{ width: `${props.percentage}%` }} />\n        </div>\n    )\n}\n\nexport default ProgressBar;\n","/**************************************************************************************************\nTABLE WRAPPER\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from 'react-table-6';\nimport 'react-table-6/react-table.css';\nimport './common.scss';\n\n\nclass TableWrapper extends React.Component {\n\n    static propTypes = {\n        tableRows: PropTypes.array.isRequired,\n        sizeStyles: PropTypes.object, \n        isLoading: PropTypes.bool,\n        title: PropTypes.string,\n    }\n    static defaultProps = {\n        sizeStyles: {'width': '300px', 'height': '400px'},\n        isLoading: false,\n    }\n\n    loadingIcon = require('../../assets/loading_cat.gif')\n\n    getTitleWords = (original) => {\n        let format = original.replace('_', ' ');\n        format = format.replace(/\\b\\w/g, l => l.toUpperCase());\n        return format;\n    }\n\n    isFloat = (input) => {\n        input = input.toString();\n        let formatted = input.replace(',', '');\n        let test = Number(formatted);\n        return !Number.isNaN(test);\n    }\n\n    getColumnWidth = (dataRows, propName) => {\n        let maxLength = propName.length;\n        dataRows.forEach( row => {\n            if (row[propName].length > maxLength)\n                maxLength = row[propName].length;\n            });\n        \n        maxLength += 3;            // some wiggle room\n        let factor = 10;           // ballpark given average font sizes\n        let width = maxLength * factor\n        if (width > 180)\n            width = 180;\n\n        return width;     \n    }\n\n    getColumnsDef = () => {\n        let tableRows = this.props.tableRows;\n        let dataProps = tableRows.length > 0 ? Object.getOwnPropertyNames(tableRows[0]) : [];\n        let columnsDef = []\n        if (dataProps.length === 0)\n            return []\n\n        dataProps.forEach( prop => {\n            let numberClass = this.isFloat(tableRows[0][prop]) ? ' center-text' : '';\n            let newCol = {\n                Header: this.getTitleWords(prop),\n                headerClassName: 'table-header' + numberClass,\n                accessor: prop,\n                className: 'table-text' + numberClass,\n                width: this.getColumnWidth(tableRows, prop),   \n            };\n            columnsDef.push(newCol);\n        });\n\n        return columnsDef;\n    }\n\n    render() {\n        let pageSize = this.props.tableRows.length <=  15 ? this.props.tableRows.length : 15;\n        let pagination = this.props.tableRows.length <=  15 ? false : true;\n\n        return (\n            <div className='table-wrapper' style={ this.props.tableRows.length == 0 ? this.props.sizeStyles : {} }>\n\n                {(() => {\n                    if (!!this.props.title) { return (\n                        <div className='strong-font'>\n                            { this.props.title }\n                        </div>\n                    )} \n                })()}\n\n                {(() => {\n                    if (this.props.tableRows.length > 0) { return (\n                        <div className='table-container small-font'>\n                            <ReactTable\n                                data={ this.props.tableRows }\n                                columns={ this.getColumnsDef() }\n                                pageSize={ pageSize }\n                                //minRows={ 1 }\n                                showPagination={ pagination }\n                                sortable={ false }\n                                resizable={ false }\n                                showPageSizeOptions= { false }\n                            />\n                        </div>\n                    )} \n                    else if (this.props.isLoading == true) { return (\n                        <div className='empty-table even-panel'>\n                            <img src={ this.loadingIcon } className='loading-icon' alt='loading'/>\n                        </div>\n                    )} \n                    else { return (\n                        <div className='empty-table even-panel'>\n                            No Data\n                        </div>\n                    )}\n                })()}\n\n            </div>\n        );\n    }\n}\n\nexport default TableWrapper;\n","/**************************************************************************************************\nWEBSOCKET LOGIC\n**************************************************************************************************/\n\nfunction Websocket(){}\n\nWebsocket.initializeWs = function (caller, channel) {\n    \n    let host = 'ws://localhost:8000';\n    if (window.location.host.includes('localhost') == false) \n        host = `wss://${window.location.host}:443`;\n    const socketUrl = `${host}/ws/${channel}/`;\n\n    caller.websocket = new WebSocket(socketUrl);\n    let websocket = caller.websocket;\n\n    websocket.onopen = () => {\n        console.log('WebSocket Connecting');\n        let newState = {\n            'connection': ['Connecting', 'Open', 'Closing', 'Closed'][websocket.readyState]\n        };\n        caller.setState(newState, () => {\n            caller.initialCalls();\n        });\n    };\n\n    websocket.onmessage = (message) => {\n        let wsMessage = JSON.parse(message.data);\n        caller.responseRouter(wsMessage);\n    };\n\n    websocket.onclose = () => {\n        console.log('WebSocket Disconnected');\n        let newState = {\n            'connection': ['Connecting', 'Open', 'Closing', 'Closed'][websocket.readyState]\n        };\n        caller.setState(newState);\n    };\n\n};\n\nexport default Websocket;\n","/**************************************************************************************************\nFORM TABLE\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.scss'\n\n\nclass FormTable extends React.Component {\n\n    static propTypes = {\n        extraClasses: PropTypes.string,\n        minWidth: PropTypes.string,\n    };\n    static defaultProps = {\n        extraClasses: \"\",\n        minWidth: \"0\",\n    };\n\n    render() {\n\n        let childrenElems = this.props.children;\n        if (!childrenElems) \n            return ''\n        else if (Array.isArray(childrenElems) == false)\n            childrenElems = [childrenElems]\n\n        return (\n            <>\n                <table className={ `form-table ${this.props.extraClasses}` } style={{ 'minWidth': this.props.minWidth }}><tbody>\n                {\n                    childrenElems.map((child, idx) => {\n                        return (\n                            <tr key={ idx } >\n                                { child }\n                            </tr> \n                        );\n                    })\n                }\n                </tbody></table>\n            </>\n        );\n    }\n}\n\nexport default FormTable;\n","/**************************************************************************************************\nTEXT WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.scss';\n\n\nclass LabelWrapper extends React.Component {\n\n    static propTypes = {\n        label: PropTypes.string.isRequired,  \n        value: PropTypes.string.isRequired,\n        disabled: PropTypes.bool,\n    };\n    static defaultProps = {\n        disabled: false,\n    };\n\n    render() {\n        let ctrlId = this.props.label.toLowerCase().replace(' ', '') + '_labl'\n        return (\n            <>\n                <td className='first-col'>\n                    <label htmlFor={ ctrlId }>{ this.props.label }: </label>\n                </td>\n                <td className='second-col'>\n                    <span id={ctrlId}>{ this.props.value }</span>\n               </td>\n            </>\n        );\n    }\n}\n\nexport default LabelWrapper;\n","/**************************************************************************************************\nTEXT WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.scss'\n\n\nclass NumberWrapper extends React.Component {\n\n    static propTypes = {\n        label: PropTypes.string.isRequired,  \n        value: PropTypes.string.isRequired,\n        disabled: PropTypes.bool,\n        updateText: PropTypes.func.isRequired,\n    }\n    static defaultProps = {\n        disabled: false,\n    };\n\n    updateValue = (synthEvt) => {\n        let newValue = synthEvt.target.value;\n        this.props.updateText(newValue);\n    }\n\n    render() {\n        let ctrlId = this.props.label.toLowerCase().replace(' ', '') + '_nptx';\n\n        return (\n            <>\n                <td className='first-col'>\n                    <label htmlFor={ ctrlId }>{ this.props.label }: </label>\n                </td>\n                <td className='second-col'>\n                    <input \n                        type={ 'number' } \n                        min={ 0 }\n                        id={ ctrlId }\n                        value={ this.props.value } \n                        onChange={ this.updateValue } \n                        className={ 'textbox-number' } \n                        disabled={ this.props.disabled }\n                    ></input>\n                </td>\n            </>\n        );\n    }\n}\n\nexport default NumberWrapper;\n","/**************************************************************************************************\nSELECT WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.scss'\n\n\nclass SelectWrapper extends React.Component {\n\n    static propTypes = {\n        label: PropTypes.string.isRequired,\n        options: PropTypes.array.isRequired,\n        value: PropTypes.number.isRequired,\n        disabled: PropTypes.bool,\n        updateSelection: PropTypes.func.isRequired,\n    }\n    static defaultProps = {\n        disabled: false,\n    };\n\n    updateValue = (synthEvt) => {\n        let newValue = synthEvt.target.value;\n        this.props.updateSelection(newValue);\n    }\n\n    render() {\n        let ctrlId = this.props.label.toLowerCase().replace(' ', '') + '_slct'\n        return (\n            <>\n                <td className='first-col'>\n                    <label htmlFor={ ctrlId }>{ this.props.label }: </label>\n                </td>\n                <td className='second-col'>\n                    <select \n                        id={ ctrlId } \n                        value={ this.props.value }\n                        onChange={ this.updateValue }\n                        disabled={ this.props.disabled }>\n                        {this.props.options.map((opt, idx) => (\n                            <option key={ idx } value={ opt['key'] }>{ opt['value'] }</option>\n                        ))}\n                    </select>\n                </td>\n            </>\n        );\n    }\n}\n\nexport default SelectWrapper;\n","/**************************************************************************************************\nTEXT WRAPPER ELEMENT\n**************************************************************************************************/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.scss'\n\n\nclass TextWrapper extends React.Component {\n\n    static propTypes = {\n        label: PropTypes.string.isRequired,  \n        value: PropTypes.string.isRequired,\n        disabled: PropTypes.bool,\n        size: PropTypes.string,\n        updateText: PropTypes.func.isRequired,\n    }\n    static defaultProps = {\n        disabled: false,\n        size: 'medium',\n    };\n\n    updateValue = (synthEvt) => {\n        let newValue = synthEvt.target.value;\n        this.props.updateText(newValue);\n    }\n\n    render() {\n        let ctrlId = this.props.label.toLowerCase().replace(' ', '') + '_nptx';\n        let sizeClass = 'textbox-medium';\n        if (this.props.size == 'small') \n            sizeClass = 'textbox-small';\n\n        return (\n            <>\n                <td className='first-col'>\n                    <label htmlFor={ ctrlId }>{ this.props.label }: </label>\n                </td>\n                <td className='second-col'>\n                    <input \n                        type={ 'text' } \n                        id={ ctrlId }\n                        value={ this.props.value } \n                        onChange={ this.updateValue } \n                        className={ sizeClass } \n                        maxLength={ 20 }\n                        disabled={ this.props.disabled }\n                    ></input>\n                </td>\n            </>\n        );\n    }\n}\n\nexport default TextWrapper;\n","/**************************************************************************************************\nBASE AXIOS PAGE\n**************************************************************************************************/\nimport React, { setGlobal } from 'reactn';\nimport {default as axios} from '../app-main/axios-wrapper';\nimport MenuLayout from '../layouts/menu-layout'\nimport * as CM from '../elements/common/_index'\nimport * as FM from '../elements/form/_index'\nimport './_page-styles.scss'\n\n\nclass BaseAxios extends React.Component {\n\n    state = {\n        'labelVal': 'my value',\n        'selectKey': 0,\n        'inputVal': '',\n        'numberVal': '',\n        'tabular': [],\n    };\n\n    selectOptions = [\n        {'key': 0, 'value': 'Value A'}, \n        {'key': 1, 'value': 'Value B'},\n        {'key': 2, 'value': 'Value C'},\n    ];\n\n\n    componentDidMount() {\n        axios.get('/api/base-module/tabular/')\n        .then( success => {\n            //console.log(success.data);\n            this.setState({ 'tabular': success.data.legoSets });\n        }).catch( error => {\n            console.log(error);\n        });\n    }\n\n    handleSelect = (payload) => {\n        let newState = {\n            'selectKey': parseInt(payload),\n            'selectVal': this.selectOptions.filter(p => p.key == payload)[0].value,\n        };\n        this.setState(newState);\n    }\n\n    handleText = (payload) => {\n        let newState = { 'inputVal': payload };\n        this.setState(newState);\n    }\n\n    handleNumber = (payload) => {\n        let newState = { 'numberVal': payload };\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <MenuLayout>\n                <div className='pure-g spacing-outer'>\n\n                    <div className='pure-u-1'>\n                        <div className='spacing-inner page-title'>\n                            Axios Template Page\n                        </div>\n                    </div>\n\n                    <div className='pure-u-1-4'>\n                        <div className='spacing-inner '>\n\n                            <FM.FormTable>\n\n                                <FM.LabelWrapper \n                                    label={ 'Label Text' } \n                                    value={ this.state.labelVal }\n                                    disabled={ false }\n                                />\n\n                                <FM.SelectWrapper \n                                    label={ 'Dropdown' } \n                                    options={ this.selectOptions } \n                                    value={ this.state.selectKey } \n                                    disabled={ false }\n                                    updateSelection={ this.handleSelect }\n                                />\n\n                                <FM.TextWrapper \n                                    label={ 'Input Text' }  \n                                    value={ this.state.inputVal } \n                                    disabled={ false }\n                                    size={ 'medium' }\n                                    updateText={ this.handleText } \n                                />\n\n                                <FM.NumberWrapper \n                                    label={ 'Numeric'} \n                                    value={ this.state.numberVal || '' }\n                                    disabled={ false }\n                                    updateText={ this.handleNumber }\n                                />\n\n                            </FM.FormTable>\n\n                            <br></br>\n\n                            {(() => {\n                                if (this.state.tabular.length > 0) { return (\n                                    this.state.tabular.map((item, idx) =>\n                                        <div key={idx}>\n                                            { item.set_no } { item.name } \n                                        </div>\n                                    )\n                                )} \n                                else { return (\n                                    <div>No tabular data</div>\n                                )}\n                            })()}\n\n                        </div>\n                    </div>\n\n                </div>\n            </MenuLayout>\n        );\n    }\n}\n\nexport default BaseAxios;\n","/**************************************************************************************************\nAPP-MAIN ROUTES\n**************************************************************************************************/\nimport * as PR from '../page-routes/_index.js'\n\nexport const RoutesConfig = [\n    {\n        title: 'Base Axios',\n        path: '/base-axios',\n        component: PR.BaseAxios,\n        order: 1,\n    },\n    {\n        title: 'Base Websocket',\n        path: '/base-websocket',\n        component: PR.BaseWebsocket,\n        order: 2,\n    },\n    {\n        title: 'Default',\n        path: '',\n        component: PR.BaseAxios,\n        order: 0,\n    },    \n];\n\n","/**************************************************************************************************\nBASE WEBSOCKET PAGE\n**************************************************************************************************/\nimport React, { setGlobal } from 'reactn';\nimport MenuLayout from '../layouts/menu-layout'\nimport * as CM from '../elements/common/_index'\nimport * as FM from '../elements/form/_index'\nimport './_page-styles.scss'\n\n\nclass BaseWebsocket extends React.Component {\n\n    websocket = null;\n\n    state = {\n        'setTable': [],\n        'setPlot': {},\n\n        'connection': '',\n        'progress': 0,\n        'status': '',\n    };\n\n    componentDidMount() {\n        CM.Websocket.initializeWs(this, 'base-module');\n    }\n\n    componentWillUnmount() {\n        this.websocket.close();\n    }\n\n    initialCalls = () => {\n        const message = { \n            'functionType': 'base-data', \n        };\n        this.websocket.send(JSON.stringify(message));\n    }\n\n    responseRouter = (wsMessage) => {\n        let newState = {};\n        console.log(wsMessage);\n\n        switch(wsMessage.functionType) {\n\n            case 'base-data-results':\n                newState = {\n                    'setTable': wsMessage['setTable'],\n                    'setPlot': JSON.parse(wsMessage['setPlot']),\n                };\n                this.setState(newState);\n                break;\n\n            case 'process-update':\n                newState = {\n                    'progress': wsMessage['progress'],\n                    'status': wsMessage['status'],\n                };\n                this.setState(newState);\n                break;\n\n            default:\n                console.log('message functionType unknown');\n        }\n    }\n\n    handleButton = () => {\n        const message = { \n            'functionType': 'run-process', \n        }\n        this.websocket.send(JSON.stringify(message));\n    }\n\n\n    render() {\n        return (\n            <MenuLayout>\n                <div className='pure-g spacing-outer'>\n\n                    <div className='pure-u-1'>\n                        <div className='spacing-inner page-title'>\n                            Websocket Template\n                        </div>\n                    </div>\n\n                    <div className='pure-u-1-4'>\n                        <div className='spacing-inner' style={{ 'width': '240px' }}>\n                            <CM.ButtonWrapper label={ 'Start Process' }  updateClick={ this.handleButton } />\n                            <FM.FormTable>\n                                <FM.LabelWrapper label={ 'Websocket' }  value={ this.state.connection } />\n                            </FM.FormTable>\n                            <div >\n                                <CM.ProgressBar percentage={ this.state.progress } />\n                            </div>\n                            <FM.FormTable>\n                                <FM.LabelWrapper label={ 'Status' }  value={ this.state.status } />\n                            </FM.FormTable>\n                        </div>\n                    </div>\n\n                    <div className='pure-u-3-4'>\n                        <div className='spacing-inner'>\n                            <CM.PlotWrapper         \n                                plotConfig={ this.state.setPlot }\n                                sizeStyles={{'width': '600px', 'height': '400px'}} \n                                isLoading={ false }\n                                isStatic={ false }\n                            />\n                        </div>\n                        <div className='spacing-inner'>\n                            <CM.TableWrapper         \n                                tableRows={ this.state.setTable }\n                                //sizeStyles={{'width': '300px', 'height': '400px'}} \n                                isLoading={ false }\n                                title={ null }\n                            />\n                        </div>\n                    </div>\n\n                </div>\n            </MenuLayout>\n        );\n    }\n}\n\nexport default BaseWebsocket;\n","/**************************************************************************************************\nAPP-ROOT\n**************************************************************************************************/\nimport * as React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { RoutesConfig } from './routes'\n\nclass App extends React.Component {\n   render() {  \n      return (\n         <Switch> \n            { \n               RoutesConfig.map( ({path, component}, key) => \n                  <Route exact path={ path } component={ component } key={ key } /> )\n            }\n         </Switch>\n      );\n   }\n}\n\nexport default App;\n","/**************************************************************************************************\nINDEX - WEBAPP ENTRY POINT\n**************************************************************************************************/\nimport React, { setGlobal } from 'reactn';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport axios from 'axios';\nimport * as serviceWorker from './service-worker';\nimport App from './app-root';\n\n\n// VIRTUAL DOM\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>, \n\tdocument.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n// GLOBAL STATE\n// this doesn't work\n\nsetGlobal({\n\tenvHost: 'hostll',\n});\n\n","module.exports = __webpack_public_path__ + \"static/media/loading_cat.f799e5f0.gif\";"],"sourceRoot":""}